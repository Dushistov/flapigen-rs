strategy:
  matrix:
    linux-stable:
      imageName: 'ubuntu-16.04'
      rustup_toolchain: stable
    linux-stable-gcc-8:
      imageName: 'ubuntu-16.04'
      rustup_toolchain: stable
      gcc_variant: gcc-8
    mac-stable:
      imageName: 'macos-10.14'
      rustup_toolchain: stable
    linux-beta:
      imageName: 'ubuntu-16.04'
      rustup_toolchain: beta
    windows-stable-64bit:
      imageName: 'vs2017-win2016'
      rustup_toolchain: stable-x86_64-pc-windows-msvc
      host_triple: x86_64-pc-windows-msvc
      platform: x64
    windows-stable-32bit:
      imageName: 'vs2017-win2016'
      rustup_toolchain: stable-i686-pc-windows-msvc
      host_triple: x86_64-pc-windows-msvc
      platform: x86
pool:
  vmImage: $(imageName)


steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
    condition: not(and(eq( variables['Agent.OS'], 'Windows_NT' ), eq( variables['platform'], 'x86' )))
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      architecture: x86
    condition: and(eq( variables['Agent.OS'], 'Windows_NT' ), eq( variables['platform'], 'x86' ))
  - checkout: self
    submodules: true
  - bash: |
      set -e
      export RUSTUP_HOME=$HOME/.rustup
      export CARGO_HOME=$HOME/.cargo
      echo ##vso[task.setvariable variable=RUSTUP_HOME]$HOME/.rustup
      echo ##vso[task.setvariable variable=CARGO_HOME]$HOME/.cargo
      curl https://sh.rustup.rs -sSf | sh -s -- -y --profile=minimal --default-toolchain $RUSTUP_TOOLCHAIN
      echo "##vso[task.prependpath]$HOME/.cargo/bin"
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
    displayName: Install Rust on linux/mac
  - script: |
      set RUSTUP_HOME=%USERPROFILE%\.rustup
      set CARGO_HOME=%USERPROFILE%\.cargo
      echo ##vso[task.setvariable variable=RUSTUP_HOME]%USERPROFILE%\.rustup
      echo ##vso[task.setvariable variable=CARGO_HOME]%USERPROFILE%\.cargo
      curl -sSf -o rustup-init.exe https://win.rustup.rs
      rustup-init.exe -y --profile=minimal --default-toolchain %RUSTUP_TOOLCHAIN% --default-host %HOST_TRIPLE%
      echo ##vso[task.setvariable variable=PATH]%PATH%;%USERPROFILE%\.cargo\bin
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Install Rust on windows
  - bash: |
      set -e
      rustup default $RUSTUP_TOOLCHAIN
      rustup update $RUSTUP_TOOLCHAIN
      rustc -vV
      rustup component add rustfmt --toolchain $RUSTUP_TOOLCHAIN
      rustfmt --version
    displayName: "Rust post-install"
  - script: |
      curl https://releases.llvm.org/5.0.2/LLVM-5.0.2-win64.exe -o llvm-installer.exe
      7z x llvm-installer.exe -oc:\llvm-binary
      echo ##vso[task.setvariable variable=LIBCLANG_PATH]C:\llvm-binary\bin
      echo ##vso[task.setvariable variable=PATH]%PATH%;C:\llvm-binary\bin
    condition: and(eq( variables['Agent.OS'], 'Windows_NT' ), eq( variables['platform'], 'x64' ))
    displayName: Install llvm on windows 64bit
  - script: |
      curl https://releases.llvm.org/5.0.2/LLVM-5.0.2-win32.exe -o llvm-installer.exe
      7z x llvm-installer.exe -oc:\llvm-binary
      echo ##vso[task.setvariable variable=LIBCLANG_PATH]C:\llvm-binary\bin
      set JAVA_PKG=zulu8.40.0.25-ca-jdk8.0.222-win_i686
      curl https://cdn.azul.com/zulu/bin/%JAVA_PKG%.zip -o java-win_i686.zip
      7z x java-win_i686.zip -oc:\
      echo ##vso[task.setvariable variable=JAVA_HOME]C:\%JAVA_PKG%
      echo ##vso[task.setvariable variable=PATH]c:\%JAVA_PKG%\bin;%PATH%;C:\llvm-binary\bin
    condition: and(eq( variables['Agent.OS'], 'Windows_NT' ), eq( variables['platform'], 'x86' ))
    displayName: Install dependicies on windows 32bit
  - script: |
      set SCCACHE_VER=0.2.10
      curl -L https://github.com/mozilla/sccache/releases/download/0.2.10/sccache-0.2.10-x86_64-pc-windows-msvc.tar.gz -o sccache.tar.gz
      7z x sccache.tar.gz
      7z x sccache-%SCCACHE_VER%-x86_64-pc-windows-msvc.tar
      copy /Y sccache-%SCCACHE_VER%-x86_64-pc-windows-msvc\sccache.exe %USERPROFILE%\.cargo\bin\sccache.exe
      echo ##vso[task.setvariable variable=SCCACHE_BUCKET]swig%PLATFORM%
      echo ##vso[task.setvariable variable=RUSTC_WRAPPER]%USERPROFILE%\.cargo\bin\sccache.exe
      echo %PATH%
      echo %USERPROFILE%
      dir C:\Users\VssAdministrator\.cargo\bin
      sccache.exe --version
      sccache --version
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Setup sccache on windows
  - bash: |
      set -e
      export SCCACHE_VER=0.2.10
      curl -L https://github.com/mozilla/sccache/releases/download/$SCCACHE_VER/sccache-$SCCACHE_VER-x86_64-unknown-linux-musl.tar.gz -o sccache.tar.gz
      tar -xzvf sccache.tar.gz
      cp -v sccache-$SCCACHE_VER-x86_64-unknown-linux-musl/sccache $HOME/.cargo/bin/
      echo "##vso[task.setvariable variable=RUSTC_WRAPPER]$HOME/.cargo/bin/sccache"
      echo "##vso[task.setvariable variable=SCCACHE_BUCKET]$IMAGENAME"
      sccache --version
      sudo apt-get install valgrind
      valgrind --version
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: Setup sccache and valgrind on linux
  - bash: |
      set -e
      if [ "$GCC_VARIANT" == "gcc-8" ]; then sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test && sudo apt-get update -qq && sudo apt-get install -qq g++-8 && sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 90; fi
      gcc --version
      g++ --version
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: Install gcc-8 if required
  - bash: |
      set -e
      export SCCACHE_VER=0.2.10
      curl -L https://github.com/mozilla/sccache/releases/download/$SCCACHE_VER/sccache-$SCCACHE_VER-x86_64-apple-darwin.tar.gz -o sccache.tar.gz
      tar -xzvf sccache.tar.gz
      cp -v sccache-$SCCACHE_VER-x86_64-apple-darwin/sccache $HOME/.cargo/bin/
      echo "##vso[task.setvariable variable=RUSTC_WRAPPER]$HOME/.cargo/bin/sccache"
      echo "##vso[task.setvariable variable=SCCACHE_BUCKET]$IMAGENAME"
      sccache --version
    condition: eq( variables['Agent.OS'], 'Darwin' )
    displayName: Setup sccache on mac os
  - bash: |
      set -e
      export TAR="boost_1_66_0.tar.gz"
      curl -L -o $TAR https://dl.bintray.com/boostorg/release/1.66.0/source/$TAR
      tar -xzvf $TAR
      echo "##vso[task.setvariable variable=BOOST_ROOT]$PWD/boost_1_66_0"
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
    displayName: Install boost linux or macos
  - bash: |
      set -e
      export TAR="boost_1_66_0.7z"
      curl -L -o $TAR https://dl.bintray.com/boostorg/release/1.66.0/source/$TAR
      7z x $TAR
      echo "##vso[task.setvariable variable=BOOST_ROOT]$PWD/boost_1_66_0"
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Install boost Windows
  - bash: |
      set -e
      clang --version
      rustc -vV
      cargo -vV
      javac -version
      cmake --version
      echo "SCCACHE_BUCKET: $SCCACHE_BUCKET"
      sccache --start-server
      cd macroslib
      cargo build
      cd ..
      cp workspace.Cargo.toml Cargo.toml
      python -c "fin = open('Cargo.toml', 'r'); res = fin.read().replace('debug = true', '').replace('incremental = true', ''); fin.close(); fout = open('Cargo.toml', 'w'); fout.write(res + '\n'); fout.close();"
      python ci_build_and_test.py --skip-android-tests
      sccache -s
    displayName: Build and run tests
    env:
      AWS_ACCESS_KEY_ID: $(S_AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(S_AWS_SECRET_ACCESS_KEY)
      SCCACHE_ENDPOINT: $(S_SCCACHE_ENDPOINT)
