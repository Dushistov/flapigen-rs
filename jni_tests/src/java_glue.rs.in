use std::{
    cell::{Ref, RefCell, RefMut},
    path::{Path, PathBuf},
    rc::Rc,
    sync::{
        atomic::{AtomicBool, Ordering},
        Arc, Mutex, MutexGuard,
    },
    time::{Duration, SystemTime},
};

use chrono::{DateTime, Utc};
use log::debug;

use crate::jni_c_header::*;

foreign_class!(class RustLogging {
    fn init() {
        env_logger::init();
    }
});

#[derive(Clone)]
pub struct Foo {
    data: i32,
    name: String,
}

impl Foo {
    fn new(val: i32, name: &str) -> Foo {
        println!("Foo::new {}  {}", val, name);
        Foo {
            data: val,
            name: name.to_string(),
        }
    }

    fn f(&self, a: i32, b: i32) -> i32 {
        println!("Foo::f {} {} {}", self.data, a, b);
        self.data + a + b
    }

    fn name(&self) -> &str {
        &self.name
    }

    fn f_double(&self, a: f64, b: f64) -> f64 {
        a.hypot(b) + self.data as f64
    }
}

//ANCHOR: doc_comments_usage
foreign_class!(
/// Class comment description for Foo.
#[derive(Clone)]
class Foo {
    self_type Foo;
    /// some text about the new function
    ///
    /// ```
    /// some markdown example in the text
    /// ```
    ///
    /// @param val - some number
    /// @param name - more information
    constructor Foo::new(val: i32, name: &str) -> Foo;
    //ANCHOR_END: doc_comments_usage
    //ANCHOR: alias_usage
    fn Foo::f(&self, _: i32, _: i32) -> i32;  alias calcF;
    //ANCHOR_END: alias_usage
    fn Foo::f_double(&self, _: f64, _: f64) -> f64;
    fn Foo::name(&self) -> &str; alias getName;
    fn fHypot(a: f64, b: f64) -> f64 {
        a.hypot(b)
    }
    fn now() -> SystemTime {
        SystemTime::now()
    }
    fn chrono_now() -> DateTime<Utc> {
        Utc::now()
    }
    fn chrono_now_opt(flag: bool) -> Option<DateTime<Utc>> {
        if flag {
            Some(Utc::now())
        } else {
            None
        }
    }
});

struct Boo {
    a: i32,
}

impl Boo {
    fn new() -> Boo {
        Boo { a: 17 }
    }
    fn test(&self, a: bool) -> f32 {
        if a {
            ::std::f32::consts::E
        } else {
            ::std::f32::consts::PI
        }
    }
    fn set_a(&mut self, val: i32) {
        self.a = val;
    }
    fn get_a(&self) -> i32 {
        self.a
    }
}

fn create_boo() -> Rc<RefCell<Boo>> {
    Rc::new(RefCell::new(Boo::new()))
}

foreign_class!(class Boo {
    self_type Boo;
    constructor create_boo() -> Rc<RefCell<Boo>>;
    fn Boo::test(&self, _: bool) -> f32;
    fn Boo::set_a(&mut self, _: i32); alias setA;
    fn Boo::get_a(&self) -> i32; alias getA;

    fn test_u8(v: u8) -> u8 {
        v + 1
    }
    fn test_i8(v: i8) -> i8 {
        v + 1
    }
    fn test_u16(v: u16) -> u16 {
        v + 1
    }
    fn test_i16(v: i16) -> i16 {
        v + 1
    }
    fn test_i32(v: i32) -> i32 {
        v + 1
    }
    fn test_u32(v: u32) -> u32 {
        v + 1
    }
    fn test_u64(v: u64) -> u64 {
        v + 1
    }
    fn test_i64(v: i64) -> i64 {
        v + 1
    }
    fn test_f32(v: f32) -> f32 {
        v + 1.
    }
    fn test_f64(v: f64) -> f64 {
        v + 1.
    }

    fn r_test_u8(v: u8) -> Result<u8, &'static str> {
        Ok(v + 1)
    }
    fn r_test_i8(v: i8) -> Result<i8, &'static str> {
        Ok(v + 1)
    }
    fn r_test_u16(v: u16) -> Result<u16, &'static str> {
        Ok(v + 1)
    }
    fn r_test_i16(v: i16) -> Result<i16, &'static str> {
        Ok(v + 1)
    }
    fn r_test_i32(v: i32) -> Result<i32, &'static str> {
        Ok(v + 1)
    }
    fn r_test_u32(v: u32) -> Result<u32, &'static str> {
        Ok(v + 1)
    }
    fn r_test_u64(v: u64) -> Result<u64, &'static str> {
        Ok(v + 1)
    }
    fn r_test_i64(v: i64) -> Result<i64, &'static str> {
        Ok(v + 1)
    }
    fn r_test_f32(v: f32) -> Result<f32, &'static str> {
        Ok(v + 1.)
    }
    fn r_test_f64(v: f64) -> Result<f64, &'static str> {
        Ok(v + 1.)
    }
});

struct TestPathAndResult {
    path: PathBuf,
    boo: Rc<RefCell<Boo>>,
}

impl TestPathAndResult {
    fn empty() -> Result<TestPathAndResult, String> {
        println!("TestPathAndResult::empty");
        Err("test error path".into())
    }
    fn new(path: &Path) -> Result<TestPathAndResult, String> {
        println!("TestPathAndResult::new path: {:?}", path);
        Ok(TestPathAndResult {
            path: path.into(),
            boo: create_boo(),
        })
    }

    fn get_path(&self) -> String {
        self.path.to_str().unwrap().into()
    }

    fn get_boo(&self) -> Rc<RefCell<Boo>> {
        self.boo.clone()
    }

    fn get_foo_list(&self) -> Vec<Foo> {
        let mut ret = Vec::new();
        for i in 0..10 {
            ret.push(Foo::new(i, &format!("foo arr: {}", i)));
        }
        ret
    }
}

//ANCHOR: foreign_code_usage
foreign_class!(class TestPathAndResult {
    self_type TestPathAndResult;
    constructor TestPathAndResult::empty() -> Result<TestPathAndResult, String>;
    constructor TestPathAndResult::new(path: &Path) -> Result<TestPathAndResult, String>;
    fn TestPathAndResult::get_path(&self) -> String; alias getPath;
    fn TestPathAndResult::get_boo(&self) -> Rc<RefCell<Boo>>; alias getBoo;
    foreign_code "    public int javaFunc() { return 17; }\n";
    foreign_code r#"
    public Boo[] testHandArrayReturn() { return do_testHandArrayReturn(this.mNativeObj); }
    private static native Boo[] do_testHandArrayReturn(long me);
"#;
    fn TestPathAndResult::get_foo_list(&self) -> Vec<Foo>;
});
//ANCHOR_END: foreign_code_usage

#[allow(non_snake_case)]
#[no_mangle]
pub fn Java_com_example_rust_TestPathAndResult_do_1testHandArrayReturn(
    env: *mut JNIEnv,
    _: jclass,
    _: jlong,
) -> jobjectArray {
    let class_id = swig_c_str!("com/example/rust/Boo");
    let jcls: jclass = unsafe { (**env).FindClass.unwrap()(env, class_id) };
    if jcls.is_null() {
        panic!("Can not find class_id {:?}", class_id);
    }
    let n = 10;
    let ret: jobjectArray =
        unsafe { (**env).NewObjectArray.unwrap()(env, n, jcls, ::std::ptr::null_mut()) };
    if ret.is_null() {
        panic!("Can not create object array");
    }

    let field_id = swig_c_str!("mNativeObj");
    let type_id = swig_c_str!("J");
    let field_id: jfieldID = unsafe { (**env).GetFieldID.unwrap()(env, jcls, field_id, type_id) };
    assert!(!field_id.is_null());

    for i in 0..n {
        let elem: jobject = unsafe { (**env).AllocObject.unwrap()(env, jcls) };
        let boo: Rc<RefCell<Boo>> = create_boo();
        boo.borrow_mut().set_a(i);
        unsafe {
            (**env).SetLongField.unwrap()(env, elem, field_id, <Rc<RefCell<Boo>>>::box_object(boo));
            (**env).SetObjectArrayElement.unwrap()(env, ret, i, elem);
            (**env).DeleteLocalRef.unwrap()(env, elem);
        }
    }
    ret
}

foreign_class!(class TestInner {
    foreigner_code r#"
    public static final class Inner {
        public final String name;

        Inner(String name) {
            this.name = name;
        }
    }
    public static native Inner getInner();
"#;
});

#[allow(non_snake_case)]
#[no_mangle]
pub fn Java_com_example_rust_TestInner_getInner(env: *mut JNIEnv, _: jclass) -> jobject {
    let class_id = ::std::ffi::CString::new("com/example/rust/TestInner$Inner").unwrap();
    let jcls: jclass = unsafe { (**env).FindClass.unwrap()(env, class_id.as_ptr()) };
    assert!(!jcls.is_null());
    let ret: jobject = unsafe { (**env).AllocObject.unwrap()(env, jcls) };
    assert!(!ret.is_null());
    let str_type_id = ::std::ffi::CString::new("Ljava/lang/String;").unwrap();
    let field_id = ::std::ffi::CString::new("name").unwrap();
    let name_field_id: jfieldID =
        unsafe { (**env).GetFieldID.unwrap()(env, jcls, field_id.as_ptr(), str_type_id.as_ptr()) };
    assert!(!name_field_id.is_null());
    let name = ::std::ffi::CString::new("Boo Boo").unwrap();
    let name = unsafe { (**env).NewStringUTF.unwrap()(env, name.as_ptr()) };
    assert!(!name.is_null());
    unsafe {
        (**env).SetObjectField.unwrap()(env, ret, name_field_id, name);
        if (**env).ExceptionCheck.unwrap()(env) != 0 {
            panic!("Failed to SetObjectField");
        }
    }
    ret
}

#[derive(Clone, Copy)]
pub struct Xyz {
    x: f64,
    y: f64,
    z: f64,
}

impl Xyz {
    fn zero() -> Xyz {
        Xyz {
            x: 0.,
            y: 0.,
            z: 0.,
        }
    }
}

foreign_class!(
    #[derive(Copy)]
    class Xyz {
        self_type Xyz;
        constructor Xyz::zero() -> Xyz;
        constructor new(x: f64, y: f64, z: f64) -> Xyz {
            Xyz { x, y, z }
        }
        fn x(&self) -> f64 { this.x }
        fn y(&self) -> f64 { this.y }
        fn z(&self) -> f64 { this.z }
        fn Xyz::clone(&self) -> Xyz;
        fn add(a: Xyz, b: Xyz) -> Xyz {
            Xyz { x: a.x + b.x, y: a.y + b.y, z: a.z + b.z }
        }
    }
);

struct TestContainers {
    empty_struct_vec: Vec<Xyz>,
    struct_vec: Vec<Foo>,
    string_vec: Vec<String>,
}

impl Default for TestContainers {
    fn default() -> Self {
        let empty_struct_vec = vec![];
        let struct_vec = vec![Foo::new(1, "1"), Foo::new(2, "2")];
        let string_vec = vec![
            "The".into(),
            "was".into(),
            "a".into(),
            "young".into(),
            "lady".into(),
            "whose".into(),
            "nose".into(),
        ];
        TestContainers {
            empty_struct_vec,
            struct_vec,
            string_vec,
        }
    }
}

impl TestContainers {
    fn get_struct_vec(&self) -> Vec<Foo> {
        self.struct_vec.clone()
    }
    fn get_empty_struct_vec(&self) -> Vec<Xyz> {
        self.empty_struct_vec.clone()
    }
    fn get_string_vec(&self) -> Vec<String> {
        self.string_vec.clone()
    }
    fn set_struct_vec(&mut self, v: Vec<Foo>) {
        self.struct_vec = v;
    }
}

foreign_class!(class TestContainers {
    self_type TestContainers;
    constructor TestContainers::default() -> TestContainers;
    fn TestContainers::get_struct_vec(&self) -> Vec<Foo>;
    fn TestContainers::get_empty_struct_vec(&self) -> Vec<Xyz>;
    fn TestContainers::get_string_vec(&self) -> Vec<String>;
    fn TestContainers::set_struct_vec(&mut self, _: Vec<Foo>);
});

fn f_hypot(a: f64, b: f64) -> f64 {
    a.hypot(b)
}

foreign_class!(class OneStaticFunctionTest {
    fn f_hypot(_ :f64, _: f64) -> f64;
});

#[derive(Default)]
struct TestArraysWithPrimitiveTypes {
    vec: Vec<i32>,
}

impl TestArraysWithPrimitiveTypes {
    fn new(val: i32, size: usize) -> TestArraysWithPrimitiveTypes {
        TestArraysWithPrimitiveTypes {
            vec: vec![val; size],
        }
    }

    fn get_ref(&self) -> &[i32] {
        &self.vec[..]
    }

    fn clone_vec(&self) -> Vec<i32> {
        self.vec.clone()
    }
}

fn arr_pass_thorough(a: &[i32]) -> &[i32] {
    a
}

fn arr_pass_through_float(a: &[f32]) -> &[f32] {
    a
}

fn arr_pass_through_double(a: &[f64]) -> &[f64] {
    a
}

fn arr_pass_through_byte(a: &[i8]) -> &[i8] {
    a
}

fn arr_pass_through_short(a: &[i16]) -> &[i16] {
    a
}

fn arr_pass_through_long(a: &[i64]) -> &[i64] {
    a
}

foreign_class!(class TestArraysWithPrimitiveTypes {
    self_type TestArraysWithPrimitiveTypes;
    constructor TestArraysWithPrimitiveTypes::default() -> TestArraysWithPrimitiveTypes;
    constructor TestArraysWithPrimitiveTypes::new(_: i32, _: usize) -> TestArraysWithPrimitiveTypes;
    fn TestArraysWithPrimitiveTypes::get_ref(&self) -> &[i32];
    fn TestArraysWithPrimitiveTypes::clone_vec(&self) -> Vec<i32>;
    fn arr_pass_through_float(a: &[f32]) -> &[f32];
    fn arr_pass_through_double(a: &[f64]) -> &[f64];
    fn arr_pass_through_byte(a: &[i8]) -> &[i8];
    fn arr_pass_through_short(a: &[i16]) -> &[i16];
    fn arr_pass_thorough(_: &[i32]) -> &[i32];
    fn arr_pass_through_long(a: &[i64]) -> &[i64];
});

#[derive(Default)]
struct TestPassObjectsAsParams {
    data: i32,
    name: String,
}

impl TestPassObjectsAsParams {
    fn f1(&mut self, foo: &Foo) {
        self.data = foo.data;
        self.name = foo.name.clone();
    }
    fn f2(&mut self, foo: &mut Foo) {
        self.f1(foo);
        foo.data = 0;
        foo.name = String::new();
    }
    fn f3(&mut self, foo: Foo) {
        self.f1(&foo);
    }

    fn f4(foo: &Foo) -> String {
        format!("{}{}", foo.name, foo.data)
    }

    fn f5(a: i32, s: &str, foo: &mut Foo) -> String {
        let ret = TestPassObjectsAsParams::f4(foo);
        foo.data = a;
        foo.name = s.into();
        ret
    }

    fn f6(foo: Foo) -> String {
        TestPassObjectsAsParams::f4(&foo)
    }

    fn get_data(&self) -> i32 {
        self.data
    }
    fn get_name(&self) -> &str {
        &self.name
    }

    fn new_from_foo(foo: Foo) -> TestPassObjectsAsParams {
        TestPassObjectsAsParams {
            name: foo.name,
            data: foo.data,
        }
    }

    fn f_get_like_me(&mut self, other: TestPassObjectsAsParams) {
        self.data = other.data;
        self.name = other.name;
    }

    fn factory_method(data: i32, name: &str) -> TestPassObjectsAsParams {
        TestPassObjectsAsParams {
            data,
            name: name.into(),
        }
    }
}

foreign_class!(class TestPassObjectsAsParams {
    self_type TestPassObjectsAsParams;
    constructor TestPassObjectsAsParams::default() -> TestPassObjectsAsParams;
    constructor TestPassObjectsAsParams::new_from_foo(_: Foo) -> TestPassObjectsAsParams;

    fn TestPassObjectsAsParams::f1(&mut self, _: &Foo);
    fn TestPassObjectsAsParams::f2(&mut self, _: &mut Foo);
    fn TestPassObjectsAsParams::f3(&mut self, _: Foo);
    fn TestPassObjectsAsParams::f_get_like_me(&mut self, _: TestPassObjectsAsParams);
    fn TestPassObjectsAsParams::get_data(&self) -> i32;
    fn TestPassObjectsAsParams::get_name(&self) -> &str;

    fn TestPassObjectsAsParams::f4(_: &Foo) -> String;
    fn TestPassObjectsAsParams::f5(_: i32, _: &str, _: &mut Foo) -> String;
    fn TestPassObjectsAsParams::f6(_: Foo) -> String;

    fn TestPassObjectsAsParams::factory_method(_: i32, _: &str)
                                                          -> TestPassObjectsAsParams;
});

pub struct GnssInfo {
    pub x: f64,
}

foreign_class!(class Position {
    self_type GnssInfo;
    private constructor = empty;
    fn Position::timeStamp(&self) -> SystemTime {
        SystemTime::now()
    }
    fn Position::getLatitude(&self) -> f64 {
        this.x
    }
});

struct LocationService;

impl LocationService {
    fn position() -> Result<GnssInfo, &'static str> {
        Ok(GnssInfo { x: 17.17 })
    }
}

foreign_class!(class LocationService {
    fn LocationService::position() -> Result<GnssInfo, &'static str>;
});

//ANCHOR: foreign_enum_usage
#[derive(Clone, Copy)]
enum MyEnum {
    Item1,
    Item2,
    Item3,
}

foreign_enum!(
    enum MyEnum {
        ITEM1 = MyEnum::Item1,
        ITEM2 = MyEnum::Item2,
        ITEM3 = MyEnum::Item3,
    }
);
//ANCHOR_END: foreign_enum_usage

#[derive(Default)]
struct Moo;

impl Moo {
    fn f1(&mut self, v: MyEnum) -> i32 {
        if let MyEnum::Item2 = v {
            17
        } else {
            -5
        }
    }

    fn next_enum(v: MyEnum) -> MyEnum {
        use MyEnum::*;
        match v {
            Item1 => Item2,
            Item2 => Item3,
            Item3 => Item1,
        }
    }
}

//ANCHOR: trait_as_callback
trait EnumObserver {
    fn on_state_changed(&self, item: MyEnum, is_ok: bool);
}

foreign_callback!(callback EnumObserver {
    self_type EnumObserver;
    onStateUpdate = EnumObserver::on_state_changed(&self, item: MyEnum, is_ok: bool);
});

foreign_class!(class TestEnumClass {
    self_type Moo;
    constructor Moo::default() -> Moo;
    fn Moo::f1(&mut self, v: MyEnum) -> i32;
    fn Moo::next_enum(v: MyEnum) -> MyEnum;
    fn call_cb(cb: Box<EnumObserver>) {
        let mut state = false;
        for e in &[MyEnum::Item1, MyEnum::Item2, MyEnum::Item3] {
            cb.on_state_changed(*e, state);
            state = !state;
        }
    }
});
//ANCHOR_END: trait_as_callback

trait OnEvent {
    fn something_change(&self, x: i32, s: &str);
}

#[derive(Default)]
struct Observable {
    observers: Vec<Box<OnEvent>>,
}

impl Observable {
    fn subscribe(&mut self, cb: Box<OnEvent>) {
        self.observers.push(cb);
    }
    fn change(&self, x: i32, s: &str) {
        debug!("Observable::change x {}, s {}", x, s);
        for cb in &self.observers {
            cb.something_change(x, s);
        }
    }
}

foreign_callback!(callback MyObserver {
    self_type OnEvent;
    onStateChanged = OnEvent::something_change(&self, x: i32, s: &str);
});

foreign_class!(class Observable {
    self_type Observable;
    constructor Observable::default() -> Observable;
    fn Observable::subscribe(&mut self, _: Box<OnEvent>);
    fn Observable::change(&self, _: i32, _: &str);
});

trait CheckAllTypesInCallbackArgs {
    fn check_all_types1(&self, _: u8, _: i8, _: u16, _: i16, _: u32, _: i32, _: u32, _: i32);
    fn check_all_types2(&self, _: u64, _: i64, _: f32, _: f64, _: usize, _: isize);
    fn check_foo(&self, foo: Foo);
    fn check_str(&self, s: &str);
    fn check_path(&self, p: &Path);
    fn check_arr(&self, arr: Vec<Foo>);
}

foreign_typemap!(
    ($p:r_type) &Path => internal_aliases::JStringPath {
        let s = $p.to_str().expect("path is not utf-8");
        let c_str = ::std::ffi::CString::new(s).unwrap();
        $out = unsafe { (**env).NewStringUTF.unwrap()(env, c_str.as_ptr()) };
    };
    ($p:f_type, unique_prefix="/*Path*/") => "/*Path*/String";
);

foreign_callback!(callback CheckAllTypesInCallbackArgs {
    self_type CheckAllTypesInCallbackArgs;
    checkAllTypes1 = CheckAllTypesInCallbackArgs::check_all_types1(&self,
                                                                   _: u8, _: i8,
                                                                   _: u16, _: i16,
                                                                   _: u32, _: i32,
                                                                   _: u32, _: i32);
    checkAllTypes2 = CheckAllTypesInCallbackArgs::check_all_types2(&self, _: u64, _: i64, _: f32,
                                                                   _: f64, _: usize, _: isize);
    checkFoo = CheckAllTypesInCallbackArgs::check_foo(&self, foo: Foo);
    checkStr = CheckAllTypesInCallbackArgs::check_str(&self, s: &str);
    checkPath = CheckAllTypesInCallbackArgs::check_path(&self, s: &Path);
    checkArray = CheckAllTypesInCallbackArgs::check_arr(&self, arr: Vec<Foo>);
});

foreign_class!(
    class TestCheckAllTypesInCallbackArgs {
        fn call_cb(cb: Box<CheckAllTypesInCallbackArgs>) {
            cb.check_all_types1(u8::max_value(), i8::min_value(),
                                u16::max_value(), i16::min_value(),
                                u32::max_value(), i32::min_value(),
                                u32::min_value(), i32::max_value());
            cb.check_all_types2(u64::from(u32::max_value()) + 1, i64::max_value(),
                                ::std::f32::consts::PI, ::std::f64::consts::E,
                                17, -17);
            cb.check_foo(Foo { data: 17, name: "17".into() });
            cb.check_str("checkStr");
            cb.check_path(Path::new("/tmp/a.txt"));
            cb.check_arr(vec![Foo::new(1, "1"), Foo::new(2, "2")]);
        }
    }
);

struct FooWithLifetime<'a> {
    data: Box<OnEvent + 'a>,
}

struct PrintEvent;
impl OnEvent for PrintEvent {
    fn something_change(&self, x: i32, s: &str) {
        println!("something_change: x = {}, s = {}", x, s);
    }
}

impl<'a> FooWithLifetime<'a> {
    fn set_data(&self, v: i32) {
        self.data.something_change(v, "FooWithLifetime");
    }
}

fn foo_with_lifetime_new<'a>() -> Rc<RefCell<FooWithLifetime<'a>>> {
    Rc::new(RefCell::new(FooWithLifetime {
        data: Box::new(PrintEvent),
    }))
}

foreign_class!(class FooWithLifetime {
    self_type FooWithLifetime<'a>;
    constructor foo_with_lifetime_new() -> Rc<RefCell<FooWithLifetime<'a>>>;
    fn FooWithLifetime::set_data(&self, v: i32);
});

struct TestOptional;

impl TestOptional {
    fn f1(x: Option<f64>) -> Option<f64> {
        if let Some(x) = x {
            Some(x + 1.)
        } else {
            None
        }
    }
    fn f2(x: Option<i64>) -> Option<i64> {
        if let Some(x) = x {
            Some(x + 1)
        } else {
            None
        }
    }
    fn f3(need_something: bool) -> Option<Foo> {
        if need_something {
            Some(Foo::new(5, "Some"))
        } else {
            None
        }
    }

    fn f4(foo: Option<Foo>) -> Option<i64> {
        foo.map(|x| i64::from(x.data))
    }

    fn f5(need_something: bool) -> Option<String> {
        if need_something {
            Some("true".to_string())
        } else {
            None
        }
    }
}

foreign_class!(class TestOptional {
    fn TestOptional::f1(x: Option<f64>) -> Option<f64>;
    fn TestOptional::f2(x: Option<i64>) -> Option<i64>;
    fn TestOptional::f3(need_something: bool) -> Option<Foo>;
    fn TestOptional::f4(foo: Option<Foo>) -> Option<i64>;
    fn TestOptional::f5(need_something: bool) -> Option<String>;
    fn f6(foo: Option<&Foo>) -> Option<String> {
        foo.map(|x| x.name.clone())
    }
    fn test_opt_str(s: Option<&str>) -> Option<String> {
        s.map(|x| x.into())
    }
    fn test_opt_i8(o: Option<i8>) -> Option<i8> {
        o.map(|x| x + 1)
    }
    fn test_opt_i16(o: Option<i16>) -> Option<i16> {
        o.map(|x| x + 1)
    }
    fn test_opt_i32(o: Option<i32>) -> Option<i32> {
        o.map(|x| x + 1)
    }
    fn test_opt_f32(o: Option<f32>) -> Option<f32> {
        o.map(|x| x + 1.7)
    }
    fn test_enum(o: Option<MyEnum>) -> Option<MyEnum> {
        o.map(|x| Moo::next_enum(x))
    }
});

struct CircularDepsA {
    s: String,
}

impl CircularDepsA {
    fn java_new(s: &str) -> Arc<Mutex<Self>> {
        Arc::new(Mutex::new(CircularDepsA { s: s.into() }))
    }

    fn a(&self, b: &CircularDepsB) -> String {
        let mut ret = self.s.clone();
        ret.push_str(&b.s);
        ret
    }
}

struct CircularDepsB {
    s: String,
}

impl CircularDepsB {
    fn new(a: f64) -> Self {
        CircularDepsB {
            s: format!("{}", a),
        }
    }
    fn b(&self, a: &CircularDepsA) -> String {
        let mut ret = self.s.clone();
        ret.push_str(&a.s);
        ret
    }
}

//ANCHOR: arc_mutex_usage
foreign_class!(class CircularDepsA {
    self_type CircularDepsA;
    constructor CircularDepsA::java_new(_: &str) -> Arc<Mutex<CircularDepsA>>;
    fn CircularDepsA::a(&self, b: &CircularDepsB) -> String;
});
//ANCHOR_END: arc_mutex_usage

foreign_class!(class CircularDepsB {
    self_type CircularDepsB;
    constructor CircularDepsB::new(_: f64) -> CircularDepsB;
    fn CircularDepsB::b(&self, a: &CircularDepsA) -> String;
});

struct Gamepad(String);
impl Gamepad {
    fn new(s: &str) -> Self {
        Gamepad(s.into())
    }
}

foreign_class!(class Gamepad {
    self_type Gamepad;
    constructor Gamepad::new(s: &str) -> Gamepad;
});

#[derive(Default)]
struct EffectBuilder {
    tag: Vec<String>,
}

impl EffectBuilder {
    fn tag(&self) -> Vec<String> {
        self.tag.clone()
    }
    fn add_gamepad(&mut self, gamepad: Gamepad) -> &mut EffectBuilder {
        self.tag.push(gamepad.0);
        self
    }
}

struct EffectBuilderWrapper(Rc<RefCell<EffectBuilder>>);

impl EffectBuilderWrapper {
    fn new() -> Self {
        EffectBuilderWrapper(Rc::new(RefCell::new(EffectBuilder::default())))
    }
    fn add_gamepad(&self, gamepad: Gamepad) -> EffectBuilderWrapper {
        self.0.borrow_mut().add_gamepad(gamepad);
        EffectBuilderWrapper(self.0.clone())
    }
    fn tag(&self) -> Vec<String> {
        self.0.borrow().tag()
    }
}

foreign_class!(
    class EffectBuilder {
        self_type EffectBuilderWrapper;
        constructor EffectBuilderWrapper::new() -> EffectBuilderWrapper;
        fn EffectBuilderWrapper::add_gamepad(&self, gamepad: Gamepad) -> EffectBuilderWrapper;
        fn EffectBuilderWrapper::tag(&self) -> Vec<String>;
    }
);

#[derive(Copy, Clone, Eq, PartialEq, Debug, Hash)]
pub struct GamepadId(pub(crate) usize);
impl GamepadId {
    fn value(&self) -> usize {
        self.0
    }
}

foreign_class!(
    class GamepadId {
        self_type GamepadId;
        private constructor = empty;
        fn GamepadId::value(&self) -> usize;
    }
);

#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
pub struct Code(pub(crate) i32);
impl Code {
    fn new(v: i32) -> Self {
        Code(v)
    }
}

foreign_class!(
    class Code {
        self_type Code;
        constructor Code::new(v: i32) -> Code;
    });

struct Gamepad2 {
    id: GamepadId,
}

impl Gamepad2 {
    fn new() -> Self {
        Gamepad2 { id: GamepadId(17) }
    }
    fn deadzone(&self, axis: Code) -> Option<f64> {
        if axis.0 == 5 {
            None
        } else {
            Some(42.42)
        }
    }
    fn id(&self) -> GamepadId {
        self.id
    }
}

foreign_class!(
    class Gamepad2 {
        self_type Gamepad2;

        constructor Gamepad2::new() -> Gamepad2;
        fn Gamepad2::deadzone(&self, axis: Code) -> Option<f64>; alias getID;
        fn Gamepad2::id(&self) -> GamepadId; alias getID;
    }
);

foreign_class!(class TestFnInline {
    fn int_to_str(a: i32) -> String {
        format!("{}", a)
    }
});

struct Session {
    name: String,
}

foreign_class!(
    #[derive(SmartPtrCopy)]
    class Session {
        self_type Session;
        constructor session_init() -> Rc<RefCell<Session>> {
            Rc::new(RefCell::new(Session::default()))
        }
        fn name(&self) -> &str {
            &this.name
        }
    }
);

impl Default for Session {
    fn default() -> Self {
        Self {
            name: "Session".into(),
        }
    }
}

#[derive(Default)]
struct NavigationService {
    on_gnss_updates_cb: Vec<Box<FnMut(i32)>>,
}

impl NavigationService {
    fn call_callbacks(&mut self) {
        for cb in &mut self.on_gnss_updates_cb {
            (*cb)(17);
        }
    }
}

foreign_class!(class NavigationService {
    self_type NavigationService;

    constructor init() -> Rc<RefCell<NavigationService>> {
        Rc::new(RefCell::new(NavigationService::default()))
    }
    fn subscribeOnUpdates(&mut self, session: Rc<RefCell<Session>>) {
        this.on_gnss_updates_cb.push(Box::new(move |x| session.borrow_mut().name = format!("{}", x)));
    }
    fn NavigationService::call_callbacks(&mut self); alias callCallbacks;
});

trait OnThreadEvent {
    fn something_change_in_other_thread(&self, x: i32, s: &str);
}

foreign_interface!(interface ThreadSafeObserver {
    self_type OnThreadEvent + Send;
    onStateChanged = OnThreadEvent::something_change_in_other_thread(&self, x: i32, s: &str);
});

foreign_class!(class TestMultiThreadCallback {
    fn f(cb: Box<OnThreadEvent + Send>) {
        std::thread::spawn(move || {
            cb.something_change_in_other_thread(42, "15");
        });
    }
});

struct DropCounter {
    flag: Arc<AtomicBool>,
}

impl Default for DropCounter {
    fn default() -> DropCounter {
        Self {
            flag: Arc::new(AtomicBool::new(true)),
        }
    }
}

impl Drop for DropCounter {
    fn drop(&mut self) {
        println!("DropCounter::Drop");
        self.flag.store(false, Ordering::Release);
    }
}

foreign_class!(class DropCounter {
    self_type DropCounter;
    constructor DropCounter::default() -> DropCounter;
});

foreign_class!(class LongOperation {
    fn do_it(drop_counter: &DropCounter) {
        println!("Start");
        let flag = drop_counter.flag.clone();
        assert!(flag.load(Ordering::Acquire));
        std::thread::sleep(Duration::from_secs(5));
        assert!(flag.load(Ordering::Acquire));
        println!("End");
    }
});
