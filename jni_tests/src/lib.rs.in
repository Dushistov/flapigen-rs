use std::{cell::{Ref, RefCell, RefMut},
          path::{Path, PathBuf},
          rc::Rc,
          time::SystemTime};

use chrono::{DateTime, Utc};
use log::{error, debug};

use crate::jni_c_header::*;

#[derive(Clone)]
struct Foo {
    data: i32,
    name: String,
}

impl Foo {
    fn new(val: i32, name: &str) -> Foo {
        println!("Foo::new {}  {}", val, name);
        Foo {
            data: val,
            name: name.to_string(),
        }
    }

    fn f(&self, a: i32, b: i32) -> i32 {
        println!("Foo::f {} {} {}", self.data, a, b);
        self.data + a + b
    }

    fn name(&self) -> &str {
        &self.name
    }

    fn f_double(&self, a: f64, b: f64) -> f64 {
        a.hypot(b) + self.data as f64
    }
}

fn f_hypot(a: f64, b: f64) -> f64 {
    a.hypot(b)
}

fn now() -> SystemTime {
    return SystemTime::now();
}

fn chrono_now() -> DateTime<Utc> {
    Utc::now()
}

foreigner_class!(class Foo {
    self_type Foo;
    constructor Foo::new(_: i32, _: &str) -> Foo;
    method Foo::f(&self, _: i32, _: i32) -> i32;  alias calcF;
    method Foo::f_double(&self, _: f64, _: f64) -> f64;
    method Foo::name(&self) -> &str; alias getName;
    static_method f_hypot(_: f64, _: f64) -> f64; alias fHypot;
    static_method now() -> SystemTime;
    static_method chrono_now() -> DateTime<Utc>;
});

struct Boo {
    a: i32,
}

impl Boo {
    fn new() -> Boo {
        Boo { a: 17 }
    }
    fn test(&self, a: bool) -> f32 {
        if a {
            ::std::f32::consts::E
        } else {
            ::std::f32::consts::PI
        }
    }
    fn set_a(&mut self, val: i32) {
        self.a = val;
    }
    fn get_a(&self) -> i32 {
        self.a
    }
}

fn create_boo() -> Rc<RefCell<Boo>> {
    Rc::new(RefCell::new(Boo::new()))
}

fn test_u8(v: u8) -> u8 {
    v + 1
}

fn test_i8(v: i8) -> i8 {
    v + 1
}

fn test_u16(v: u16) -> u16 {
    v + 1
}

fn test_i16(v: i16) -> i16 {
    v + 1
}

fn test_i32(v: i32) -> i32 {
    v + 1
}

fn test_u32(v: u32) -> u32 {
    v + 1
}

fn test_u64(v: u64) -> u64 {
    v + 1
}

fn test_i64(v: i64) -> i64 {
    v + 1
}

fn test_f32(v: f32) -> f32 {
    v + 1.
}
fn test_f64(v: f64) -> f64 {
    v + 1.
}

fn r_test_u8(v: u8) -> Result<u8, &'static str> {
    Ok(v + 1)
}

fn r_test_i8(v: i8) -> Result<i8, &'static str> {
    Ok(v + 1)
}

fn r_test_u16(v: u16) -> Result<u16, &'static str> {
    Ok(v + 1)
}

fn r_test_i16(v: i16) -> Result<i16, &'static str> {
    Ok(v + 1)
}

fn r_test_i32(v: i32) -> Result<i32, &'static str> {
    Ok(v + 1)
}

fn r_test_u32(v: u32) -> Result<u32, &'static str> {
    Ok(v + 1)
}

fn r_test_u64(v: u64) -> Result<u64, &'static str> {
    Ok(v + 1)
}

fn r_test_i64(v: i64) -> Result<i64, &'static str> {
    Ok(v + 1)
}

fn r_test_f32(v: f32) -> Result<f32, &'static str> {
    Ok(v + 1.)
}
fn r_test_f64(v: f64) -> Result<f64, &'static str> {
    Ok(v + 1.)
}

foreigner_class!(class Boo {
    self_type Boo;
    constructor create_boo() -> Rc<RefCell<Boo>>;
    method Boo::test(&self, _: bool) -> f32;
    method Boo::set_a(&mut self, _: i32); alias setA;
    method Boo::get_a(&self) -> i32; alias getA;
    static_method test_u8(v: u8) -> u8;
    static_method test_i8(v: i8) -> i8;
    static_method test_u16(v: u16) -> u16;
    static_method test_i16(v: i16) -> i16;
    static_method test_i32(v: i32) -> i32;
    static_method test_u32(v: u32) -> u32;
    static_method test_u64(v: u64) -> u64;
    static_method test_i64(v: i64) -> i64;
    static_method test_f32(v: f32) -> f32;
    static_method test_f64(v: f64) -> f64;


    static_method r_test_u8(v: u8) -> Result<u8, &'static str>;
    static_method r_test_i8(v: i8) -> Result<i8, &'static str>;
    static_method r_test_u16(v: u16) -> Result<u16, &'static str>;
    static_method r_test_i16(v: i16) -> Result<i16, &'static str>;
    static_method r_test_i32(v: i32) -> Result<i32, &'static str>;
    static_method r_test_u32(v: u32) -> Result<u32, &'static str>;
    static_method r_test_u64(v: u64) -> Result<u64, &'static str>;
    static_method r_test_i64(v: i64) -> Result<i64, &'static str>;
    static_method r_test_f32(v: f32) -> Result<f32, &'static str>;
    static_method r_test_f64(v: f64) -> Result<f64, &'static str>;
});

struct TestPathAndResult {
    path: PathBuf,
    boo: Rc<RefCell<Boo>>,
}

impl TestPathAndResult {
    fn empty() -> Result<TestPathAndResult, String> {
        println!("TestPathAndResult::empty");
        Err("test error path".into())
    }
    fn new(path: &Path) -> Result<TestPathAndResult, String> {
        println!("TestPathAndResult::new path: {:?}", path);
        Ok(TestPathAndResult {
            path: path.into(),
            boo: create_boo(),
        })
    }

    fn get_path(&self) -> String {
        self.path.to_str().unwrap().into()
    }

    fn get_boo(&self) -> Rc<RefCell<Boo>> {
        self.boo.clone()
    }

    fn get_foo_list(&self) -> Vec<Foo> {
        let mut ret = Vec::new();
        for i in 0..10 {
            ret.push(Foo::new(i, &format!("foo arr: {}", i)));
        }
        ret
    }
}

foreigner_class!(class TestPathAndResult {
    self_type TestPathAndResult;
    constructor TestPathAndResult::empty() -> Result<TestPathAndResult, String>;
    constructor TestPathAndResult::new(path: &Path) -> Result<TestPathAndResult, String>;
    method TestPathAndResult::get_path(&self) -> String; alias getPath;
    method TestPathAndResult::get_boo(&self) -> Rc<RefCell<Boo>>; alias getBoo;
    foreigner_code "    public int javaFunc() { return 17; }\n";
    foreigner_code r#"
    public Boo[] testHandArrayReturn() { return do_testHandArrayReturn(this.mNativeObj); }
    private static native Boo[] do_testHandArrayReturn(long me);
"#;
    method TestPathAndResult::get_foo_list(&self) -> Vec<Foo>;
});

#[allow(non_snake_case)]
#[no_mangle]
pub fn Java_com_example_rust_TestPathAndResult_do_1testHandArrayReturn(
    env: *mut JNIEnv,
    _: jclass,
    _: jlong,
) -> jobjectArray {
    let class_id = swig_c_str!("com/example/rust/Boo");
    let jcls: jclass = unsafe { (**env).FindClass.unwrap()(env, class_id) };
    if jcls.is_null() {
        panic!("Can not find class_id {:?}", class_id);
    }
    let n = 10;
    let ret: jobjectArray =
        unsafe { (**env).NewObjectArray.unwrap()(env, n, jcls, ::std::ptr::null_mut()) };
    if ret.is_null() {
        panic!("Can not create object array");
    }

    let field_id = swig_c_str!("mNativeObj");
    let type_id = swig_c_str!("J");
    let field_id: jfieldID = unsafe { (**env).GetFieldID.unwrap()(env, jcls, field_id, type_id) };
    assert!(!field_id.is_null());

    for i in 0..n {
        let elem: jobject = unsafe { (**env).AllocObject.unwrap()(env, jcls) };
        let boo: Rc<RefCell<Boo>> = create_boo();
        boo.borrow_mut().set_a(i);
        unsafe {
            (**env).SetLongField.unwrap()(env, elem, field_id, <Rc<RefCell<Boo>>>::box_object(boo));
            (**env).SetObjectArrayElement.unwrap()(env, ret, i, elem);
            (**env).DeleteLocalRef.unwrap()(env, elem);
        }
    }
    ret
}

foreigner_class!(class TestInner {
    foreigner_code r#"
    public static final class Inner {
        public final String name;

        Inner(String name) {
            this.name = name;
        }
    }
    public static native Inner getInner();
"#;
});

#[allow(non_snake_case)]
#[no_mangle]
pub fn Java_com_example_rust_TestInner_getInner(env: *mut JNIEnv, _: jclass) -> jobject {
    let class_id = ::std::ffi::CString::new("com/example/rust/TestInner$Inner").unwrap();
    let jcls: jclass = unsafe { (**env).FindClass.unwrap()(env, class_id.as_ptr()) };
    assert!(!jcls.is_null());
    let ret: jobject = unsafe { (**env).AllocObject.unwrap()(env, jcls) };
    assert!(!ret.is_null());
    let str_type_id = ::std::ffi::CString::new("Ljava/lang/String;").unwrap();
    let field_id = ::std::ffi::CString::new("name").unwrap();
    let name_field_id: jfieldID =
        unsafe { (**env).GetFieldID.unwrap()(env, jcls, field_id.as_ptr(), str_type_id.as_ptr()) };
    assert!(!name_field_id.is_null());
    let name = ::std::ffi::CString::new("Boo Boo").unwrap();
    let name = unsafe { (**env).NewStringUTF.unwrap()(env, name.as_ptr()) };
    assert!(!name.is_null());
    unsafe {
        (**env).SetObjectField.unwrap()(env, ret, name_field_id, name);
        if (**env).ExceptionCheck.unwrap()(env) != 0 {
            panic!("Failed to SetObjectField");
        }
    }
    ret
}

#[derive(Clone)]
struct Xyz;

impl Xyz {
    fn zero() -> Xyz {
        Xyz
    }
    fn new(_: f64, _: f64, _: f64) -> Xyz {
        Xyz
    }
}

foreigner_class!(class Xyz {
    self_type Xyz;
    constructor Xyz::zero() -> Xyz;
    constructor Xyz::new(_: f64, _: f64, _: f64) -> Xyz;
});

struct TestContainers {
    empty_struct_vec: Vec<Xyz>,
    struct_vec: Vec<Foo>,
    string_vec: Vec<String>,
}

impl Default for TestContainers {
    fn default() -> Self {
        let empty_struct_vec = vec![];
        let struct_vec = vec![Foo::new(1, "1"), Foo::new(2, "2")];
        let string_vec = vec![
            "The".into(),
            "was".into(),
            "a".into(),
            "young".into(),
            "lady".into(),
            "whose".into(),
            "nose".into(),
        ];
        TestContainers {
            empty_struct_vec,
            struct_vec,
            string_vec,
        }
    }
}

impl TestContainers {
    fn get_struct_vec(&self) -> Vec<Foo> {
        self.struct_vec.clone()
    }
    fn get_empty_struct_vec(&self) -> Vec<Xyz> {
        self.empty_struct_vec.clone()
    }
    fn get_string_vec(&self) -> Vec<String> {
        self.string_vec.clone()
    }
    fn set_struct_vec(&mut self, v: Vec<Foo>) {
        self.struct_vec = v;
    }
}

foreigner_class!(class TestContainers {
    self_type TestContainers;
    constructor TestContainers::default() -> TestContainers;
    method TestContainers::get_struct_vec(&self) -> Vec<Foo>;
    method TestContainers::get_empty_struct_vec(&self) -> Vec<Xyz>;
    method TestContainers::get_string_vec(&self) -> Vec<String>;
    method TestContainers::set_struct_vec(&mut self, _: Vec<Foo>);
});

foreigner_class!(class OneStaticFunctionTest {
    static_method f_hypot(_ :f64, _: f64) -> f64;
});

#[derive(Default)]
struct TestArraysWithPrimitiveTypes {
    vec: Vec<i32>,
}

impl TestArraysWithPrimitiveTypes {
    fn new(val: i32, size: usize) -> TestArraysWithPrimitiveTypes {
        TestArraysWithPrimitiveTypes {
            vec: vec![val; size],
        }
    }

    fn get_ref(&self) -> &[i32] {
        &self.vec[..]
    }

    fn clone_vec(&self) -> Vec<i32> {
        self.vec.clone()
    }
}

fn arr_pass_thorough(a: &[i32]) -> &[i32] {
    a
}

fn arr_pass_through_float(a: &[f32]) -> &[f32] {
    a
}

fn arr_pass_through_double(a: &[f64]) -> &[f64] {
    a
}

fn arr_pass_through_byte(a: &[i8]) -> &[i8] {
    a
}

fn arr_pass_through_short(a: &[i16]) -> &[i16] {
    a
}

fn arr_pass_through_long(a: &[i64]) -> &[i64] {
    a
}

foreigner_class!(class TestArraysWithPrimitiveTypes {
    self_type TestArraysWithPrimitiveTypes;
    constructor TestArraysWithPrimitiveTypes::default() -> TestArraysWithPrimitiveTypes;
    constructor TestArraysWithPrimitiveTypes::new(_: i32, _: usize) -> TestArraysWithPrimitiveTypes;
    method TestArraysWithPrimitiveTypes::get_ref(&self) -> &[i32];
    method TestArraysWithPrimitiveTypes::clone_vec(&self) -> Vec<i32>;
    static_method arr_pass_through_float(a: &[f32]) -> &[f32];
    static_method arr_pass_through_double(a: &[f64]) -> &[f64];
    static_method arr_pass_through_byte(a: &[i8]) -> &[i8];
    static_method arr_pass_through_short(a: &[i16]) -> &[i16];
    static_method arr_pass_thorough(_: &[i32]) -> &[i32];
    static_method arr_pass_through_long(a: &[i64]) -> &[i64];
});

#[derive(Default)]
struct TestPassObjectsAsParams {
    data: i32,
    name: String,
}

impl TestPassObjectsAsParams {
    fn f1(&mut self, foo: &Foo) {
        self.data = foo.data;
        self.name = foo.name.clone();
    }
    fn f2(&mut self, foo: &mut Foo) {
        self.f1(foo);
        foo.data = 0;
        foo.name = String::new();
    }
    fn f3(&mut self, foo: Foo) {
        self.f1(&foo);
    }

    fn f4(foo: &Foo) -> String {
        format!("{}{}", foo.name, foo.data)
    }

    fn f5(a: i32, s: &str, foo: &mut Foo) -> String {
        let ret = TestPassObjectsAsParams::f4(foo);
        foo.data = a;
        foo.name = s.into();
        ret
    }

    fn f6(foo: Foo) -> String {
        TestPassObjectsAsParams::f4(&foo)
    }

    fn get_data(&self) -> i32 {
        self.data
    }
    fn get_name(&self) -> &str {
        &self.name
    }

    fn new_from_foo(foo: Foo) -> TestPassObjectsAsParams {
        TestPassObjectsAsParams {
            name: foo.name,
            data: foo.data,
        }
    }

    fn f_get_like_me(&mut self, other: TestPassObjectsAsParams) {
        self.data = other.data;
        self.name = other.name;
    }

    fn factory_method(data: i32, name: &str) -> TestPassObjectsAsParams {
        TestPassObjectsAsParams {
            data,
            name: name.into(),
        }
    }
}

foreigner_class!(class TestPassObjectsAsParams {
    self_type TestPassObjectsAsParams;
    constructor TestPassObjectsAsParams::default() -> TestPassObjectsAsParams;
    constructor TestPassObjectsAsParams::new_from_foo(_: Foo) -> TestPassObjectsAsParams;
    
    method TestPassObjectsAsParams::f1(&mut self, _: &Foo);
    method TestPassObjectsAsParams::f2(&mut self, _: &mut Foo);
    method TestPassObjectsAsParams::f3(&mut self, _: Foo);
    method TestPassObjectsAsParams::f_get_like_me(&mut self, _: TestPassObjectsAsParams);
    method TestPassObjectsAsParams::get_data(&self) -> i32;
    method TestPassObjectsAsParams::get_name(&self) -> &str;

    static_method TestPassObjectsAsParams::f4(_: &Foo) -> String;
    static_method TestPassObjectsAsParams::f5(_: i32, _: &str, _: &mut Foo) -> String;
    static_method TestPassObjectsAsParams::f6(_: Foo) -> String;

    static_method TestPassObjectsAsParams::factory_method(_: i32, _: &str)
                                                          -> TestPassObjectsAsParams;
});

struct GnssInfo {
    pub x: f64,
}

#[allow(non_snake_case)]
mod Position {
    use super::*;

    pub(crate) fn timeStamp(_: &GnssInfo) -> SystemTime {
        SystemTime::now()
    }
    pub(crate) fn getLatitude(gi: &GnssInfo) -> f64 {
        gi.x
    }
}

foreigner_class!(class Position {
    self_type GnssInfo;
    private constructor = empty;
    method Position::timeStamp(&self) -> SystemTime;
    method Position::getLatitude(&self) -> f64;
});

struct LocationService;

impl LocationService {
    fn position() -> Result<GnssInfo, &'static str> {
        Ok(GnssInfo { x: 17.17 })
    }
}

foreigner_class!(class LocationService {
    static_method LocationService::position() -> Result<GnssInfo, &'static str>;
});

enum MyEnum {
    Item1,
    Item2,
    Item3,
}

foreign_enum!(enum MyEnum {
    ITEM1 = MyEnum::Item1,
    ITEM2 = MyEnum::Item2,
    ITEM3 = MyEnum::Item3,
});

#[derive(Default)]
struct Moo;

impl Moo {
    fn f1(&mut self, v: MyEnum) -> i32 {
        if let MyEnum::Item2 = v {
            17
        } else {
            -5
        }
    }

    fn next_enum(v: MyEnum) -> MyEnum {
        use crate::MyEnum::*;
        match v {
            Item1 => Item2,
            Item2 => Item3,
            Item3 => Item1,
        }
    }
}

foreigner_class!(class TestEnumClass {
    self_type Moo;
    constructor Moo::default() -> Moo;
    method Moo::f1(&mut self, v: MyEnum) -> i32;
    static_method Moo::next_enum(v: MyEnum) -> MyEnum;
});

trait OnEvent {
    fn something_change(&self, x: i32, s: &str);
}

#[derive(Default)]
struct Observable {
    observers: Vec<Box<OnEvent>>,
}

impl Observable {
    fn subscribe(&mut self, cb: Box<OnEvent>) {
        self.observers.push(cb);
    }
    fn change(&self, x: i32, s: &str) {
        debug!("Observable::change x {}, s {}", x, s);
        for cb in &self.observers {
            cb.something_change(x, s);
        }
    }
}

foreign_interface!(interface MyObserver {
    self_type OnEvent;
    onStateChanged = OnEvent::something_change(&self, x: i32, s: &str);
});

foreigner_class!(class Observable {
    self_type Observable;
    constructor Observable::default() -> Observable;
    method Observable::subscribe(&mut self, _: Box<OnEvent>);
    method Observable::change(&self, _: i32, _: &str);
});

trait CheckAllTypesInCallbackArgs {
    fn check_all_types1(&self, _: u8, _: i8, _: u16, _: i16, _: u32, _: i32, _: u32, _: i32);
    fn check_all_types2(&self, _: u64, _: i64, _: f32, _: f64, _: usize, _: isize);
}

foreign_interface!(interface CheckAllTypesInCallbackArgs {
    self_type CheckAllTypesInCallbackArgs;
    checkAllTypes1 = CheckAllTypesInCallbackArgs::check_all_types1(&self, _: u8, _: i8, _: u16,
                                                                   _: i16, _: u32, _: i32,
                                                                   _: u32, _: i32);
    checkAllTypes2 = CheckAllTypesInCallbackArgs::check_all_types2(&self, _: u64, _: i64, _: f32,
                                                                   _: f64, _: usize, _: isize);
});

struct FooWithLifetime<'a> {
    data: Box<OnEvent + 'a>,
}

struct PrintEvent;
impl OnEvent for PrintEvent {
    fn something_change(&self, x: i32, s: &str) {
        println!("something_change: x = {}, s = {}", x, s);
    }
}

impl<'a> FooWithLifetime<'a> {
    fn set_data(&self, v: i32) {
        self.data.something_change(v, "FooWithLifetime");
    }
}

fn foo_with_lifetime_new<'a>() -> Rc<RefCell<FooWithLifetime<'a>>> {
    Rc::new(RefCell::new(FooWithLifetime {
        data: Box::new(PrintEvent),
    }))
}

foreigner_class!(class FooWithLifetime {
    self_type FooWithLifetime<'a>;
    constructor foo_with_lifetime_new() -> Rc<RefCell<FooWithLifetime<'a>>>;
    method FooWithLifetime::set_data(&self, v: i32);
});

struct TestOptional;

impl TestOptional {
    fn f1(x: Option<f64>) -> Option<f64> {
        if let Some(x) = x {
            Some(x + 1.)
        } else {
            None
        }
    }
    fn f2(x: Option<i64>) -> Option<i64> {
        if let Some(x) = x {
            Some(x + 1)
        } else {
            None
        }
    }
    fn f3(need_something: bool) -> Option<Foo> {
        if need_something {
            Some(Foo::new(5, "Some"))
        } else {
            None
        }
    }

    fn f4(foo: Option<Foo>) -> bool {
        foo.is_some()
    }
}

foreigner_class!(class TestOptional {
    self_type TestOptional;
    static_method TestOptional::f1(x: Option<f64>) -> Option<f64>;
    static_method TestOptional::f2(x: Option<i64>) -> Option<i64>;
    static_method TestOptional::f3(need_something: bool) -> Option<Foo>;
    static_method TestOptional::f4(foo: Option<Foo>) -> bool;
});
