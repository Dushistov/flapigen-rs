struct TestOptional;

impl TestOptional {
    fn f1(x: Option<f64>) -> Option<f64> {
        if let Some(x) = x {
            Some(x + 1.)
        } else {
            None
        }
    }
    fn f2(x: Option<i64>) -> Option<i64> {
        if let Some(x) = x {
            Some(x + 1)
        } else {
            None
        }
    }
    fn f3(need_something: bool) -> Option<Foo> {
        if need_something {
            Some(Foo::new(5, "Some"))
        } else {
            None
        }
    }

    fn f4(foo: Option<Foo>) -> Option<i64> {
        foo.map(|x| i64::from(x.data))
    }

    fn f5(need_something: bool) -> Option<String> {
        if need_something {
            Some("true".to_string())
        } else {
            None
        }
    }
}

foreign_class!(class TestOptional {
    fn TestOptional::f1(x: Option<f64>) -> Option<f64>;
    fn TestOptional::f2(x: Option<i64>) -> Option<i64>;
    fn TestOptional::f3(need_something: bool) -> Option<Foo>;
    fn TestOptional::f4(foo: Option<Foo>) -> Option<i64>;
    fn TestOptional::f5(need_something: bool) -> Option<String>;
    fn f6(foo: Option<&Foo>) -> Option<String> {
        foo.map(|x| x.name.clone())
    }
    fn test_opt_str(s: Option<&str>) -> Option<String> {
        s.map(|x| x.into())
    }
    fn test_opt_i8(o: Option<i8>) -> Option<i8> {
        o.map(|x| x + 1)
    }
    fn test_opt_i16(o: Option<i16>) -> Option<i16> {
        o.map(|x| x + 1)
    }
    fn test_opt_i32(o: Option<i32>) -> Option<i32> {
        o.map(|x| x + 1)
    }
    fn test_opt_f32(o: Option<f32>) -> Option<f32> {
        o.map(|x| x + 1.7)
    }
    fn test_enum(o: Option<MyEnum>) -> Option<MyEnum> {
        o.map(|x| Moo::next_enum(x))
    }
});
