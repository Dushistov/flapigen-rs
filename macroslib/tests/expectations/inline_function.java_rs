r##"#[no_mangle]
pub extern "C" fn Java_org_example_BLAUtils_latitude_1to_1str(
    env: *mut JNIEnv,
    _: jclass,
    lat: internal_aliases::JDouble,
    plus_sym: jstring,
    minus_sym: jstring,
) -> jstring {
    let mut lat: Option<f64> = from_java_lang_double_to_rust(env, lat);
    let mut plus_sym: JavaString = JavaString::new(env, plus_sym);
    let mut plus_sym: &str = plus_sym.to_str();
    let mut minus_sym: JavaString = JavaString::new(env, minus_sym);
    let mut minus_sym: &str = minus_sym.to_str();
    let mut ret: String = {
        format!(
            "{}",
            Latitude::new_with_symbols(lat, plus_sym.into(), minus_sym.into())
        )
    };
    let mut ret: jstring = from_std_string_jstring(ret, env);
    ret
}"##;

r##"#[no_mangle]
pub extern "C" fn Java_org_example_BLAUtils_longitude_1to_1str(
    env: *mut JNIEnv,
    _: jclass,
    lon: internal_aliases::JDouble,
    plus_sym: jstring,
    minus_sym: jstring,
) -> jstring {
    let mut lon: Option<f64> = from_java_lang_double_to_rust(env, lon);
    let mut plus_sym: JavaString = JavaString::new(env, plus_sym);
    let mut plus_sym: &str = plus_sym.to_str();
    let mut minus_sym: JavaString = JavaString::new(env, minus_sym);
    let mut minus_sym: &str = minus_sym.to_str();
    let mut ret: String = {
        format!(
            "{}",
            Longitude::new_with_symbols(lon, plus_sym.into(), minus_sym.into())
        )
    };
    let mut ret: jstring = from_std_string_jstring(ret, env);
    ret
}"##;
