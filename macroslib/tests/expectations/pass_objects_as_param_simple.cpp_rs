r##"# [ no_mangle ]
 pub extern "C" fn TestPassObjectsAsParams_f1 ( this : * mut TestPassObjectsAsParams , a0 : * const :: std :: os :: raw :: c_void , ) -> ( ) {
 assert ! ( ! a0 . is_null ( ) ) ;
 let a0 : & Foo = unsafe { &* ( a0 as * const Foo ) } ;
 let this : & TestPassObjectsAsParams = unsafe { this . as_mut ( ) . unwrap ( ) } ;
 let mut ret : ( ) = TestPassObjectsAsParams :: f1 ( this , a0 ) ;
 ret
 }"##;

r##"# [ no_mangle ] pub extern "C" fn TestPassObjectsAsParams_f2 ( this : * mut TestPassObjectsAsParams , a0 : * mut :: std :: os :: raw :: c_void , ) -> ( ) {
 assert ! ( ! a0 . is_null ( ) ) ;
 let a0 : * mut Foo = a0 as * mut Foo ;
 let a0 : Box < Foo > = unsafe { Box :: from_raw ( a0 ) } ;
 let a0 : Foo = * a0 ;
 let this : & TestPassObjectsAsParams = unsafe { this . as_mut ( ) . unwrap ( ) } ;
 let mut ret : ( ) = TestPassObjectsAsParams :: f2 ( this , a0 ) ;
 ret }"##;

r##"# [ no_mangle ]
 pub extern "C" fn TestPassObjectsAsParams_f3 ( this : * mut TestPassObjectsAsParams , a0 : * mut :: std :: os :: raw :: c_void , ) -> ( ) {
 assert ! ( ! a0 . is_null ( ) ) ; let a0 : & mut Foo = unsafe { & mut * ( a0 as * mut Foo ) } ;
 let this : & TestPassObjectsAsParams = unsafe { this . as_mut ( ) . unwrap ( ) } ;
 let mut ret : ( ) = TestPassObjectsAsParams :: f3 ( this , a0 ) ;
 ret }"##;

r##"# [ no_mangle ] pub extern "C" fn TestPassObjectsAsParams_f3_a ( this : * mut TestPassObjectsAsParams , a0 : * mut :: std :: os :: raw :: c_void , ) -> ( ) {
 assert ! ( ! a0 . is_null ( ) ) ;
 let a0 : & mut Moo = unsafe { & mut * ( a0 as * mut Moo ) } ;
 let this : & TestPassObjectsAsParams = unsafe { this . as_mut ( ) . unwrap ( ) } ;
 let mut ret : ( ) = TestPassObjectsAsParams :: f3_a ( this , a0 ) ;
 ret }"##;


r##"# [ no_mangle ] pub extern "C" fn TestPassObjectsAsParams_f4 ( a0 : * const :: std :: os :: raw :: c_void , ) -> ( ) {
 assert ! ( ! a0 . is_null ( ) ) ;
 let a0 : & Foo = unsafe { &* ( a0 as * const Foo ) } ;
 let mut ret : ( ) = TestPassObjectsAsParams :: f4 ( a0 ) ;
 ret }"##;

r##"# [ no_mangle ] pub extern "C" fn TestPassObjectsAsParams_f5 ( a0 : * mut :: std :: os :: raw :: c_void , ) -> ( ) {
 assert ! ( ! a0 . is_null ( ) ) ;
 let a0 : * mut Foo = a0 as * mut Foo ;
 let a0 : Box < Foo > = unsafe { Box :: from_raw ( a0 ) } ;
 let a0 : Foo = * a0 ;
 let mut ret : ( ) = TestPassObjectsAsParams :: f5 ( a0 ) ;
 ret }"##;
