r##"# [ no_mangle ] pub extern "C" fn Boo_f1 ( this : * mut Boo , ) -> CRustSliceu32 {
 let this : & Boo = unsafe { this . as_mut ( ) . unwrap ( ) } ;
 let mut ret : & [ u32 ] = Boo :: f1 ( this , ) ;
 let ret : CRustSliceu32 = CRustSliceu32 { data : ret . as_ptr ( ) , len : ret . len ( ) , } ;
 ret }"##;

r##"# [ no_mangle ] pub extern "C" fn Boo_f2 ( this : * mut Boo , ) -> CRustObjectSlice {
 let this : & Boo = unsafe { this . as_mut ( ) . unwrap ( ) } ;
 let mut ret : & [ Foo ] = Boo :: f2 ( this , ) ;
 let ret : CRustObjectSlice = CRustObjectSlice { data : ret . as_ptr ( ) as * const :: std :: os :: raw :: c_void , len : ret . len ( ) , step : :: std :: mem :: size_of ::< Foo > ( ) , } ;
 ret }"##;

r##"# [ no_mangle ] pub extern "C" fn Boo_f3 ( this : * mut Boo , ) -> CRustSliceusize {
 let this : & Boo = unsafe { this . as_mut ( ) . unwrap ( ) } ;
 let mut ret : & [ usize ] = Boo :: f3 ( this , ) ;
 let ret : CRustSliceusize = CRustSliceusize { data : ret . as_ptr ( ) , len : ret . len ( ) , } ;
 ret }"##;


